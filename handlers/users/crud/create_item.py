from aiogram import types
from aiogram.dispatcher import FSMContext

from aiogram.utils.callback_data import CallbackData
from handlers.users.crud.brand_and_category_crud import read
from handlers.users.crud.update_object import update_save_changes
from handlers.users.mixins import get_crud_menu, get_preview_data, send_template_to_api, create_media_group
from keyboards.inline.admin_buttons import create_item_markup
from keyboards.inline.store_buttons import cancel_markup, template_markup
from loader import dp, bot
from states import states

cd_create_item = CallbackData("cd_create_item", "data")


# –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç crud –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–æ–¥–µ–ª–∏ item
# –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —É–¥–∞–ª–∏—Ç—å, —Å–æ–∑–¥–∞—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–π—Ç–µ–º—ã
@dp.callback_query_handler(text='ITEM')
async def open_item_crud_menu(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é', reply_markup=get_crud_menu('ITEM'))


@dp.callback_query_handler(text='ITEM_create')
async def item_create_title(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', reply_markup=cancel_markup)
    await states.ItemCreate.Title.set()


@dp.message_handler(state=states.ItemCreate.Title)
async def item_create_title_check(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await bot.send_message(message.from_user.id, f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', reply_markup=cancel_markup)
    await states.ItemCreate.Description.set()


@dp.message_handler(state=states.ItemCreate.Description)
async def item_create_description_check(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await bot.send_message(message.from_user.id, f'ID –ü–æ–ª\n'
                                                 f'1  –ú\n'
                                                 f'2  –ñ\n'
                                                 f'3  –£–Ω–∏—Å–µ–∫—Å\n')
    await bot.send_message(message.from_user.id, f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª–∞', reply_markup=cancel_markup)
    await states.ItemCreate.Gender.set()


@dp.message_handler(state=states.ItemCreate.Gender)
async def item_create_gender(message: types.Message, state: FSMContext):
    try:
        gender = int(message.text)
        if gender < 1 or gender > 3:
            raise ValueError()
        await state.update_data(gender=gender)
        await bot.send_message(message.from_user.id, f'ID –ü–æ–ª\n'
                                                     f'1  Top quality\n'
                                                     f'2  High quality - AAA +\n'
                                                     f'3  1: 1ü§©\n')
        await bot.send_message(message.from_user.id, f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–∞—á–µ—Å—Ç–≤–∞', reply_markup=cancel_markup)
        await states.ItemCreate.Quality.set()
    except ValueError:
        await bot.send_message(message.from_user.id, f'ID –ü–æ–ª\n'
                                                     f'1  –ú\n'
                                                     f'2  –ñ\n'
                                                     f'3  –£–Ω–∏—Å–µ–∫—Å\n')
        await bot.send_message(message.from_user.id, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–æ —á–∏—Å–ª–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ù—É–∂–Ω–æ–≥–æ –ø–æ–ª–∞.',
                               reply_markup=cancel_markup)


@dp.message_handler(state=states.ItemCreate.Quality)
async def item_create_quality(message: types.Message, state: FSMContext):
    try:
        quality = int(message.text)
        if quality < 1 or quality > 3:
            raise ValueError()
        await state.update_data(quality=quality)
        await bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞', reply_markup=cancel_markup)
        await states.ItemCreate.Price.set()
    except ValueError:
        await bot.send_message(message.from_user.id, f'ID –¢–∏–ø –∫–∞—á–µ—Å—Ç–≤–∞\n'
                                                     f'1  Top quality\n'
                                                     f'2  High quality - AAA +\n'
                                                     f'3  1: 1ü§©\n')
        await bot.send_message(message.from_user.id, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–æ —á–∏—Å–ª–æ. '
                                                     '–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–∞—á–µ—Å—Ç–≤–∞', reply_markup=cancel_markup)


@dp.message_handler(state=states.ItemCreate.Price)
async def item_create_category(message: types.Message, state: FSMContext):
    try:
        int(message.text)
        await state.update_data(price=message.text)
        await read(message, 'category')
        await bot.send_message(message.from_user.id,
                               f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n'
                               f'–î–ª—è –≤–≤–æ–¥–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –∏–∑ –∑–∞–ø—è—Ç—ã–º–∏'
                               f'–ù–∞–ø—Ä–∏–º–µ—Ä: 1,2,3',
                               reply_markup=cancel_markup)
        await states.ItemCreate.Category.set()
    except ValueError:
        await bot.send_message(message.from_user.id, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–æ —á–∏—Å–ª–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–Ω—É.',
                               reply_markup=cancel_markup)


@dp.message_handler(state=states.ItemCreate.Category)
async def item_create_brand(message: types.Message, state: FSMContext):
    try:
        categories = int(message.text)
        categories = [categories]
    except ValueError:
        try:
            if message.text.find(',') < 0:
                raise (ValueError('ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'))
            categories = message.text.replace(' ', '').split(',')
            for cat in categories:
                int(cat)
        except ValueError:
            await read(message, 'category')
            return await bot.send_message(message.from_user.id,
                                          '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–æ —á–∏—Å–ª–æ. '
                                          '–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—ã–µ.'
                                          ' –ù–∞–ø—Ä–∏–º–µ—Ä: 1,2,3.\n',
                                          reply_markup=cancel_markup)

    await state.update_data(categories=categories)
    await read(message, 'brand')
    await bot.send_message(message.from_user.id, f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –Ω—É–∂–Ω–æ–≥–æ –±—Ä—ç–Ω–¥–∞', reply_markup=cancel_markup)
    await states.ItemCreate.Brand.set()


@dp.message_handler(state=states.ItemCreate.Brand)
async def item_create_media_group(message: types.Message, state: FSMContext):
    try:
        brands = int(message.text)
        brands = [brands]
    except ValueError:
        try:
            if message.text.find(',') < 0:
                raise (ValueError('ID –±—Ä—ç–Ω–¥–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'))
            brands = message.text.replace(' ', '').split(',')
            for brand in brands:
                int(brand)
        except ValueError:
            await read(message, 'brand')
            return await bot.send_message(message.from_user.id,
                                          '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–æ —á–∏—Å–ª–æ. '
                                          '–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—ã–µ.'
                                          ' –ù–∞–ø—Ä–∏–º–µ—Ä: 1,2,3.\n',
                                          reply_markup=cancel_markup)

    await state.update_data(brands=brands)
    await bot.send_message(message.from_user.id, f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–Ω–µ –±–æ–ª–µ–µ 9—à—Ç).', reply_markup=cancel_markup)
    await states.ItemCreate.Media_group.set()


@dp.message_handler(state=states.ItemCreate.Media_group, content_types=types.ContentType.ANY)
async def handle_albums(message: types.Message, state: FSMContext, album=None):
    markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ',
                                        callback_data=f'ITEM_create')]
        ]
    )
    data = await state.get_data()
    try:
        preview = data['preview']
    except KeyError:
        preview = True
    values = []
    content_type = 0
    if album:
        for obj in album:
            if obj.photo:
                file_id = obj.photo[-1].file_id
            else:
                file_id = obj[obj.content_type].file_id
            content_type = obj.content_type
            try:
                values.append(file_id)
            except ValueError:
                return await message.answer("–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
    else:
        values.append(message.photo[0].file_id)
    await state.update_data(photos=values)
    if not preview:
        result = create_media_group(values)
        if not result:
            await state.reset_state()
            return await bot.send_message(message.from_user.id, f"–û—à–∏–±–∫–∞")
        await update_save_changes(message, state, result)

    else:
        photos, text = await get_preview_data(state)
        if not photos and not text:
            await state.reset_state()
            return await bot.send_message(message.from_user.id,
                                          '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ø–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞. '
                                          '–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –±—Ä—ç–Ω–¥–∞. '
                                          '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ —ç—Ç–∏—Ö –ø–∞—Ä–µ–º–µ—Ç—Ä–æ–≤.',
                                          reply_markup=markup)

        if not len(photos) == 1:
            media_group = types.MediaGroup()
            for photo in photos:
                try:
                    media_group.attach({"media": photo, "type": content_type})
                except ValueError:
                    pass
            await bot.send_media_group(message.from_user.id, media_group)
        await bot.send_photo(message.from_user.id, photo=photos[0],
                             caption=text, reply_markup=template_markup)


@dp.callback_query_handler(text='send_to_api', state=states.ItemCreate.Media_group)
async def save_template(call: types.CallbackQuery, state: FSMContext):
    res = await send_template_to_api(state)
    await state.reset_state()
    if res:
        return await bot.send_message(
            call.from_user.id, f"–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –ø–æ–¥ ID {res}",
            reply_markup=create_item_markup
        )

    await bot.send_message(
        call.from_user.id, f"–û—à–∏–±–∫–∞. –¢–æ–≤–∞—Ä –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
        reply_markup=create_item_markup
    )


@dp.callback_query_handler(text='cancel', state=states.ItemCreate)
async def cancel_wo_state(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã —Å –¢–æ–≤–∞—Ä–æ–º.')
    await state.reset_state()
